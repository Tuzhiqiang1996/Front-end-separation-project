/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50505
Source Host           : localhost:3306
Source Database       : tudemo

Target Server Type    : MYSQL
Target Server Version : 50505
File Encoding         : 65001

Date: 2021-04-12 09:58:56
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for m_blog
-- ----------------------------
DROP TABLE IF EXISTS `m_blog`;
CREATE TABLE `m_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `content` longtext,
  `created` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  `status` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of m_blog
-- ----------------------------
INSERT INTO `m_blog` VALUES ('1', '1', '生活就像海洋，只有意志坚强的人才能到达彼岸', '这里是摘要哈哈哈', '内容？？？', '2020-05-21 22:08:42', '0');
INSERT INTO `m_blog` VALUES ('2', '1', '最值得学习的博客项目eblog', 'eblog是一个基于Springboot2.1.2开发的博客学习项目，为了让项目融合更多的知识点，达到学习目的，编写了详细的从0到1开发文档。主要学习包括：自定义Freemarker标签，使用shiro+redis完成了会话共享，redis的zset结构完成本周热议排行榜，t-io+websocket完成即时消息通知和群聊，rabbitmq+elasticsearch完成博客内容搜索引擎等。值得学习的地方很多！', '**推荐阅读：**\r\n\r\n[分享一套SpringBoot开发博客系统源码，以及完整开发文档！速度保存！](https://mp.weixin.qq.com/s/jz6e977xP-OyaAKNjNca8w)\r\n\r\n[Github上最值得学习的100个Java开源项目，涵盖各种技术栈！](https://mp.weixin.qq.com/s/N-U0TaEUXnBFfBsmt_OESQ)\r\n\r\n[2020年最新的常问企业面试题大全以及答案](https://mp.weixin.qq.com/s/lR5LC5GnD2Gs59ecV5R0XA)', '2020-05-28 09:36:38', '0');
INSERT INTO `m_blog` VALUES ('3', '1', '关注公众号JavaCat，回复xshell或navicat获取破解对应工具', '视频中所用到的xshell和navicat直接获取哈！', '### 工具获取\r\n\r\n* xshell 6 绿色破解版：关注公众号：JavaCat，回复 xshell 获取\r\n* Navicat 11 简体中文版：关注公众号：JavaCat，回复 navicat 获取\r\n\r\n公众号二维码：\r\n\r\n![JavaCat](//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201020/7fa16a1f957f4cfebe7be1f6675f6f36.png \"JavaCat\")\r\n\r\n直接扫码回复对应关键字\r\n\r\n**推荐阅读：**\r\n\r\n[B站86K播放量，SpringBoot+Vue前后端分离完整入门教程！](https://mp.weixin.qq.com/s/jGEkHTf2X8l-wUenc-PpEw)\r\n\r\n[分享一套SpringBoot开发博客系统源码，以及完整开发文档！速度保存！](https://mp.weixin.qq.com/s/jz6e977xP-OyaAKNjNca8w)\r\n\r\n[Github上最值得学习的100个Java开源项目，涵盖各种技术栈！](https://mp.weixin.qq.com/s/N-U0TaEUXnBFfBsmt_OESQ)\r\n\r\n[2020年最新的常问企业面试题大全以及答案](https://mp.weixin.qq.com/s/lR5LC5GnD2Gs59ecV5R0XA)', '2020-10-20 05:05:31', '0');
INSERT INTO `m_blog` VALUES ('7', '1', '你真的会写单例模式吗?', '单例模式可能是代码最少的模式了，但是少不一定意味着简单，想要用好、用对单例模式，还真得费一番脑筋。本文对 Java 中常见的单例模式写法做了一个总结，如有错漏之处，恳请读者指正。', '> 作者：吃桔子的攻城狮 来源：http://www.tekbroaden.com/singleton-java.html\n\n\n单例模式可能是代码最少的模式了，但是少不一定意味着简单，想要用好、用对单例模式，还真得费一番脑筋。本文对 Java 中常见的单例模式写法做了一个总结，如有错漏之处，恳请读者指正。\n\n饿汉法\n===\n\n顾名思义，饿汉法就是在第一次引用该类的时候就创建对象实例，而不管实际是否需要创建。代码如下：\n\n```\npublic class Singleton {  \n    private static Singleton = new Singleton();\n    private Singleton() {}\n    public static getSignleton(){\n        return singleton;\n    }\n}\n\n```\n\n这样做的好处是编写简单，但是无法做到延迟创建对象。但是我们很多时候都希望对象可以尽可能地延迟加载，从而减小负载，所以就需要下面的懒汉法：\n', '2020-05-22 00:42:44', '0');
INSERT INTO `m_blog` VALUES ('9', '1', '真正理解Mysql的四种隔离级别@', '事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。\n\n事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所以操作。', '### 什么是事务  \n\n> 事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。\n> \n> 事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所以操作。\n\n**事务的 ACID**\n\n事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）。这四个特性简称为 ACID 特性。\n\n> 1 、原子性。事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做\n> \n> 2 、一致性。事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。', '2020-05-22 22:04:46', '0');
INSERT INTO `m_blog` VALUES ('10', '1', '博客项目eblog讲解视频上线啦，长达17个小时！！', '1. 慕课网免费资源好久都没更新了，新教程大都付费\n2. B站上的视频繁多，通过收藏和弹幕数量通常很容易判断出视频是否优质\n3. 讲真，B站的弹幕文化，让我觉得，我不是一个在学习，自古人才出评论。哈哈哈\n4. B站视频通常广告少，up主的用心录制，通常只为了你关注他', 'ok，再回到我们的eblog项目，源码、文档、视频我都开源出来了。来些基本操作：github上给个star，B站视频给个三连支持咧。\n\neblog源码：https://github.com/MarkerHub/eblog\n\n点击这里：[10+篇完整开发文档](https://mp.weixin.qq.com/mp/homepage?__biz=MzIwODkzOTc1MQ==&hid=1&sn=8e512316c3dfe140e636d0c996951166)\n\n![](//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20200508/c290d945b7d24c79b172759bdb5b94e0.png)\n\n视频讲解：（记得关注我噢！）\n\nhttps://www.bilibili.com/video/BV1ri4y1x71A\n\n![](//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20200508/983b5abc1c934360a1a1362347a275f7.png)\n\n项目其实还很多bug的，哈哈，我还需要进行二次迭代，到时候再发迭代文档出来。\n\n关注下我的B站，作为一个自媒体的自由职业者，没有什么比涨粉更让我开心的了，嘻嘻。\n\n近期即将推出的视频教程：\n\n1. 搭建脚手架，前后端分离首秀\n2. Shiro入门到精通教程\n3. SpringBoot2.2.6最新入门教程', '2020-05-22 22:05:49', '0');
INSERT INTO `m_blog` VALUES ('15', '1', '分布式文件服务器', '说到分布式文件服务器,可能大家最常听说的就是FastDfs,而一提起它又比较头疼,安装起来太麻烦了,文件不好迁移啦等等之类的,今天就给大家推荐一款最近刚刚兴起的分布式文件服务器,Go-FastDfs,它是一个基于http协议的分布式文件系统，它基于大道至简的设计理念，一切从简设计，使得它的运维及扩展变得更加简单，它具有高性能、高可靠、无中心、免维护等优点。 另外它是基于go语言开发的,使得它对于高并发的处理非常的优秀。', '- 支持curl命令上传\r\n- 支持浏览器上传\r\n- 支持HTTP下载\r\n- 支持多机自动同步\r\n- 支持断点下载\r\n- 支持配置自动生成\r\n- 支持小文件自动合并(减少inode占用)\r\n- 支持秒传\r\n- 支持一键迁移\r\n- 支持并行体验\r\n- 支持断点续传(tus)\r\n- 支持docker部署\r\n- 支持自监控告警\r\n- 支持集群文件信息查看\r\n- 使用通用HTTP协议\r\n- 无需专用客户端（支持wget,curl等工具）\r\n- 类fastdfs\r\n- 高性能\r\n- 高可靠\r\n- 无中心设计(所有节点都可以同时读写)', '2021-03-03 19:32:59', '0');
INSERT INTO `m_blog` VALUES ('16', '1', '谁又不曾孤独呢-孤独患者', '孤独，真的成为了人的生活常态，', '不知道为什么最近总能想到这个话题，不知道你能不能明白生命叫孤独，不知道你有没有和你谈的来的人。也许正因为孤独，你才迷恋各种游戏、电影、综艺、甚至发了疯的写代码不敢停下来，你怕闲下来就像我一样在这儿思考自己是否真的非常孤独，试问一下，谁又不曾感到孤独呢？ 孤独患者 记得看过这样一本书，书名叫《不曾孤独，怎会懂得》，里边有这样一句话“孤独是与生俱来的宿命”，你自己的路终究要走，或许你会孤独终老，又或许你会遇到那个彼此陪伴的人。无论结局如何，都是你自己换来的。孤独的人总会在找一些让自己不再感到孤独的事情做，或迷茫、或沉迷、或堕落，时不时的又会思考自己，促使自己成长，朝着不再孤独的那个自己努力，当你觉得不再孤独了，你会牢牢的抓紧这种感觉，害怕它悄然的溜走，因为你懂得了孤独的滋味，经历了很多的挫折才得到的这种不孤独的感觉，也正是因为这样，不曾孤独，怎会懂得 孤独患者 愿你我不再孤独，时刻存在着希望 ---孤独患者', '2021-02-04 14:19:20', '0');
INSERT INTO `m_blog` VALUES ('17', '0', '你好李焕英剧组来汉贾玲秀武汉话：“我信了你的邪”', '人民资讯', '【你好李焕英剧组来汉贾玲秀武汉话：“我信了你的邪”】2月20日，在《你好，李焕英》票房突破37亿的这一天，该片导演、编剧、主演贾玲，带着张小斐、许君聪两位主演以及多位影片编剧来汉，连跑5家影城与武汉观众相见欢。身为湖北襄阳妹子的贾玲，还在活动现场担任起武汉话推广大使，教一群东北小伙伴们学说武汉话。母亲的离世，是贾玲一生之痛，她将子欲养而亲不待的遗憾和痛楚刻在《你好，李焕英》的每一个镜头里，打动了无数观众，成为今年春节档票房“黑马”。2月19日还在襄阳教剧组小伙伴说襄阳话的贾玲，昨日又教起大家学说武汉话，开口便是一句标准的“我信了你的邪”。听完贾玲的示范，张小斐自信地翻译道：“意思是，我欣赏你的鞋。”武汉 你好李焕英位列中国影史票房第六名 《你好，李焕英》来汉教武汉话，贾玲：我信了你的邪，张小斐：我欣赏你的鞋', '2021-02-21 11:22:29', '0');
INSERT INTO `m_blog` VALUES ('21', '1', '12岁“小马云”被抛弃后回村', '大家还记得长相酷似阿里巴巴创始人的“小马云”吗？', '2015年，这个8岁的小男孩因长相撞脸马云意外走红。连马云本人都表示“乍一看到这小子，还以为是家里人上传了我小时候的照片”', '2021-02-21 15:15:14', '0');
INSERT INTO `m_blog` VALUES ('22', '1', '习近平的扶贫故事第六集：“不获全胜决不收兵', '习近平的扶贫故事', '党的十八大之后，习近平总书记考察慰问的第一个民族自治县——甘肃东乡族自治县，是该省58个集中连片特困片区县和23个深度贫困县之一，是甘肃省脱贫攻坚的主战场。在这里，习近平嘱托要“把水引来，把路修通，把新农村建设好”', '2021-03-01 16:42:41', '0');
INSERT INTO `m_blog` VALUES ('29', '1', '使用 koa2 实现一个简单JWT鉴权', '介绍jwt', ' \n##   JWT 简介\n> 什么是 JWT\n\n全称 JSON Web Token， 是目前最流行的跨域认证解决方案。基本的实现是服务端认证后，生成一个 JSON 对象，发回给用户。用户与服务端通信的时候，都要发回这个 JSON 对象。\n该 JSON 类似如下：\n```js\n{\n  \"姓名\": \"张三\",\n  \"角色\": \"管理员\",\n  \"到期时间\": \"2018年7月1日0点0分\"\n}\n\n```\n## 为什么需要 JWT\n先看下一般的认证流程，基于 session_id 和 Cookie 实现\n- 用户向服务器发送用户名和密码。\n- 服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。\n- 服务器向用户返回一个 session_id，写入用户的 Cookie。\n- 用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。\n- 服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。\n\n但是这里有一个大的问题，假如是服务器集群，则要求 session 数据共享，每台服务器都能够读取 session。这个实现成本是比较大的。\n而 JWT 转换了思路，将 JSON 数据返回给前端的，前端再次请求时候将数据发送到后端，后端进行验证。也就是服务器是无状态的，所以更加容易拓展。\n\n\n## JWT 的数据结构\n\n> JWT 的三个部分依次如下:\n- Header（头部），类似如下\n```js\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\nalg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）。typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT\n\n- Payload（负载）。也是一个 JSON，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段。如下所示\n- iss (issuer)：签发人\n- exp (expiration time)：过期时间\n- sub (subject)：主题\n- aud (audience)：受众\n- nbf (Not Before)：生效时间\n- iat (Issued At)：签发时间\n- jti (JWT ID)：编号\n\n\n当然也可以自定义私有字段。但是要注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。\n\n- Signature（签名）。Signature 部分是对前两部分的签名，防止数据篡改。首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。\n\n```js\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n\n```\n\n算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用\"点\"（.）分隔，就可以返回给用户。如下所示\n\n\n![1]( https://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib124q4jBABO3kOIq92RDOzia4W3WUWnhOQicAVa7M7Ribfb0JicII5Vk6gY7ep5SCbrFb6V8o7QCufZyw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1) \n\n\n## JWT 的安全\n\n- JWT 默认是不加密，但也是可以加密的。JWT 不加密的情况下，不能将秘密数据写入 JWT\n- JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证\n- 为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输\n\n\n## Node 简单demo—— Koa JWT 的实现\n说完理论知识，我们来看下如何实现 JWT，大致的流程如下：\n![2](https://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib124q4jBABO3kOIq92RDOziaEzLwg2CibhyHyfCaGpyknQObO4HYWuO34e5z1ChpG4BGicj3ibThjG4vA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n首先，用户登录后服务端根据用户信息生成并返回 token 给到客户端，前端在下次请求中把 token 带给服务器，服务器验证有效后，返回数据。无效的话，返回 401 状态码\n这里我们用 Node 实现，主要用到的两个库有\n\n- [jsonwebtoken，可以生成 token，校验等](https://www.npmjs.com/package/jsonwebtoken)\n     \n- [koa-jwt 中间件 对 jsonwebtoken 进一步的封装，主要用来校验 token](https://www.npmjs.com/package/koa-jwt)\n\n> 快速搭建一个 koa 项目\n\n发现官方目前没有一个快速搭建 koa 项目的方式，像 Vue-cli 一样。（可能是搭建一个 koa 项目成本也很低）。但懒人的我，还是找到了一个工具 —— koa-generator\nhttps://www.npmjs.com/package/koa-generator\n使用也相对简单，如下\n\n- 安装\n```js\nnpm install -g koa-generator\n```\n- koa2 my-project 新建一个叫做 my-project 的koa2 项目\n\n```js\ncd my-project 和 npm install\n```\n\n- 启动项目 npm start\n打开 localhost:3000\n\n> 生成 Token\n\n为了演示方便，我这里直接定义了变量 userList 存储用户的信息，真实应该是存放在数据库中的。\n\n```js\nconst crypto = require(\"crypto\"),\n  jwt = require(\"jsonwebtoken\");\n// TODO:使用数据库\n// 这里应该是用数据库存储，这里只是演示用\nlet userList = [];\n\nclass UserController {\n  // 用户登录\n  static async login(ctx) {\n    const data = ctx.request.body;\n    if (!data.name || !data.password) {\n      return ctx.body = {\n        code: \"000002\", \n        message: \"参数不合法\"\n      }\n    }\n    const result = userList.find(item => item.name === data.name && item.password === crypto.createHash(\'md5\').update(data.password).digest(\'hex\'))\n    if (result) {\n      const token = jwt.sign(\n        {\n          name: result.name\n        },\n        \"Gopal_token\", // secret\n        { expiresIn: 60 * 60 } // 60 * 60 s\n      );\n      return ctx.body = {\n        code: \"0\",\n        message: \"登录成功\",\n        data: {\n          token\n        }\n      };\n    } else {\n      return ctx.body = {\n        code: \"000002\",\n        message: \"用户名或密码错误\"\n      };\n    }\n  }\n}\n\nmodule.exports = UserController;\n\n```\n\n\n通过 jsonwebtoken 的 sign 方法生成一个 token。该方法第一个参数指的是 Payload（负载），用于编码后存储在 token 中的数据，也是校验 token 后可以拿到的数据。第二个是秘钥，服务端特有，注意校验的时候要相同才能解码，而且是保密的，一般而言，最好是定公共的变量，这里只是演示方便，直接写死。第三个参数是 option，可以定义 token 过期时间\n\n\n> 客户端获取 token\n\n前端登录获取到 token 后可以存储到 cookie 中也可以存放在 localStorage 中。这里我直接存到了 localStorage 中\n\n```js\nlogin() {\n  this.$axios\n    .post(\"/api/login\", {\n      ...this.ruleForm,\n    })\n    .then(res => {\n      if (res.code === \"0\") {\n        this.$message.success(\'登录成功\');\n        localStorage.setItem(\"token\", res.data.token);\n        this.$router.push(\"/\");\n      } else {\n        this.$message(res.message);\n      }\n    });\n}\n\n```\n封装 axios 的拦截器，每次请求的时候把 token 带在请求头发送给服务器进行验证。这里如果之前放在 Cookie 中，可以让它自动发送，但是这样不能跨域。所以推荐做法是放在 HTTP 请求头 Authorization 中，注意这里的 Authorization 的设置，前面要加上 Bearer 。详情可以见 Bearer Authentication\nhttps://swagger.io/docs/specification/authentication/bearer-authentication/\n\n```js\n\n// axios 请求拦截器处理请求数据\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem(\'token\');\n  config.headers.common[\'Authorization\'] = \'Bearer \' + token; // 留意这里的 Authorization\n  return config;\n})\n\n```\n> 校验 token\n使用 koa-jwt 中间件进行验证，方式比较简单，如下所示\n\n```js\n// 错误处理\napp.use((ctx, next) => {\n  return next().catch((err) => {\n      if(err.status === 401){\n          ctx.status = 401;\n        ctx.body = \'Protected resource, use Authorization header to get access\\n\';\n      }else{\n          throw err;\n      }\n  })\n})\n\n// 注意：放在路由前面\napp.use(koajwt({\n  secret: \'Gopal_token\'\n}).unless({ // 配置白名单\n  path: [/\\/api\\/register/, /\\/api\\/login/]\n}))\n\n// routes\napp.use(index.routes(), index.allowedMethods())\napp.use(users.routes(), users.allowedMethods())\n```\n~  需要注意的是以下几点：\n- secret 必须和 sign 时候保持一致\n- 可以通过 unless 配置接口白名单，也就是哪些 URL 可以不用经过校验，像登陆/注册都可以不用校验\n- 校验的中间件需要放在需要校验的路由前面，无法对前面的 URL 进行校验\n> 演示\n\n-  如果直接访问需要登录的接口，则会 401\n\n![3](https://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib124q4jBABO3kOIq92RDOziaFibnXwUpAQfFJZX2Iw5yFgLMd98fp01gNdMgGG6ldsnbXOb1uOpKDXQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n-  先注册，后登录，不然会提示用户名或者密码错误\n\n\n![4](https://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib124q4jBABO3kOIq92RDOziasicVRDa3nIHpMImS7Sju4WQlha5hd3CjUOOdm0yxS1ouTN1aWwic6gzQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n -  登录后带上 Authorization，可以正常访问，返回 200 以及正确的数据\n\n![5](https://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib124q4jBABO3kOIq92RDOziaicz8ibc8xs9EwlqgpPnQ4apFRMRcygVukdMEiafSWOEKCKPSblucDXtEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n### 总结\n\n本文总结了关于 JWT 鉴权相关的知识，并提供了一个 koa2 实现的简单 demo，希望对大家有所帮助。\n本文 demo 地址：\n\n\n[Client：](https://github.com/GpingFeng/jwt-client)\n[Server：](https://github.com/GpingFeng/jwt-koa2-demo)', '2021-03-03 17:26:46', '0');
INSERT INTO `m_blog` VALUES ('30', '1', 'bind、call、apply 区别', '面试官：bind、call、apply 区别？如何实现一个bind?', ' ![1](https://mmbiz.qpic.cn/mmbiz_png/gH31uF9VIibSicKv9TS33PfFGeQ81UARWSuUg7gCyrXyeO3aZEhHD83CqEyzmtltXTvmkh3U9qFFrDXxwmUbMqzA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n## 一、作用\n\ncall、apply、bind作用是改变函数执行时的上下文，简而言之就是改变函数运行时的this指向\n\n那么什么情况下需要改变this的指向呢？下面举个例子\n```js\n\nvar name=\"lucy\";\nconst obj={\n    name:\"martin\",\n    say:function () {\n        console.log(this.name);\n    }\n};\nobj.say(); //martin，this指向obj对象\nsetTimeout(obj.say,0); //lucy，this指向window对象\n```\n从上面可以看到，正常情况say方法输出martin\n\n但是我们把say放在setTimeout方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候this指向window，所以输出luck\n\n我们实际需要的是this指向obj对象，这时候就需要该改变this指向了\n\n```js\nsetTimeout(obj.say.bind(obj),0); //martin，this指向obj对象\n```\n\n## 二、区别\n\n下面再来看看apply、call、bind的使用\n\n> apply\n\n- apply接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入\n\n改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次\n\n```js\n\nfunction fn(...args){\n    console.log(this,args);\n}\nlet obj = {\n    myname:\"张三\"\n}\n\nfn.apply(obj,[1,2]); // this会变成传入的obj，传入的参数必须是一个数组；\nfn(1,2) // this指向window\n```\n当第一个参数为null、undefined的时候，默认指向window(在浏览器中)\n```js\nfn.apply(null,[1,2]); // this指向window\nfn.apply(undefined,[1,2]); // this指向window\n```\n\n> call\n- call方法的第一个参数也是this的指向，后面传入的是一个参数列表 跟apply一样，改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次\n\n```js\n\nfunction fn(...args){\n    console.log(this,args);\n}\nlet obj = {\n    myname:\"张三\"\n}\n\nfn.call(obj,1,2); // this会变成传入的obj，传入的参数必须是一个数组；\nfn(1,2) // this指向window\n```\n\n同样的，当第一个参数为null、undefined的时候，默认指向window(在浏览器中)\n```js\nfn.call(null,[1,2]); // this指向window\nfn.call(undefined,[1,2]); // this指向window\n```\n> bind\n- bind方法和call很相似，第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入) 改变this指向后不会立即执行，而是返回一个永久改变this指向的函数\n\n```js\n\nfunction fn(...args){\n    console.log(this,args);\n}\nlet obj = {\n    myname:\"张三\"\n}\n\nconst bindFn = fn.bind(obj); // this 也会变成传入的obj ，bind不是立即执行需要执行一次\nbindFn(1,2) // this指向obj\nfn(1,2) // this指向window\n```\n### 小结\n从上面可以看到，apply、call、bind三者的区别在于：\n- 三者都可以改变函数的this对象指向\n- 三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window\n- 三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入\n- bind是返回绑定this之后的函数，apply、call 则是立即执行\n\n### 实现\n实现bind的步骤，我们可以分解成为三部分：\n- 修改this指向\n- 动态传递参数\n```js\n\n// 方式一：只在bind中传递函数参数\nfn.bind(obj,1,2)()\n\n// 方式二：在bind中传递函数参数，也在返回函数中传递参数\nfn.bind(obj,1)(2)\n```\n\n- 兼容new关键字\n\n\n整体实现代码如下：\n\n```js\n\nFunction.prototype.myBind = function (context) {\n    // 判断调用对象是否为函数\n    if (typeof this !== \"function\") {\n        throw new TypeError(\"Error\");\n    }\n\n    // 获取参数\n    const args = [...arguments].slice(1),\n          fn = this;\n\n    return function Fn() {\n\n        // 根据调用方式，传入不同绑定值\n        return fn.apply(this instanceof Fn ? new fn(...arguments) : context, args.concat(...arguments)); \n    }\n}\n```\n\n', '2021-03-04 10:42:15', '0');
INSERT INTO `m_blog` VALUES ('31', '3', '一个 SpringBoot 项目该包含哪些？', '你会搭建一个springboot项目吗？有哪些点需要注意的？其实都差不多，记住几个流程！', '> 前言\n\n建立一个全新的项目，或者把旧的庞大的项目，进行拆分成多个项目。在建立新的项目中，经常需要做一些重复的工作，比如说拷贝一下常用的工具类，通用代码等等。\n\n所以就可以做一个基础的项目方便使用，在经历新项目的时候，直接在基础项目上进行简单配置就可以开发业务代码了。\n\n>基础项目该包含哪些东西。\n\n- Swagger 在线接口文档。\n\n- CodeGenerator 代码生成器。\n\n- 统一返回。\n\n- 通用的分页对象。\n\n- 常用工具类。\n\n- 全局异常拦截。\n\n- 错误枚举。\n\n- 自定义异常。\n\n- 多环境配置文件。\n\n- Maven 多环境配置。\n\n- 日志配置。\n\n- JenkinsFile。\n\n\n\n', '2021-03-04 18:07:54', '2');
INSERT INTO `m_blog` VALUES ('33', '1', 'Java之Spring Boot详解(非原创）', '摘录', ' \r\n\r\n## 文章大纲\r\n\r\n一、Spring Boot 概述\r\n二、Spring Boot 入门案例\r\n三、Spring\r\n            Boot核心功能代码实战\r\n四、项目源码与资料下载\r\n五、参考文章\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-1ab9b66561007142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n## 一、Spring Boot 概述\r\n\r\n### 1. 什么是 Spring Boot\r\n\r\n  Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring\r\n            应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。简单的来说 Spring Boot\r\n            这个项目整合目前很多的流行的第三方框架,并且做了一系列的默认配置,我们无需在进行手动配置,直接拿过来直接使用! 接下来我们比较一下Spring mvc和 Spring Boot的开发过程\r\n\r\nSpring mvc\r\n（1）导入 spring mvc 的相关依赖包\r\n（2）在 web.xml\r\n            文件中配置 Spring mvc 的前端控制器\r\n（3）创建一个 spring mvc 的配置文件\r\n（4）在 spring mvc 的配置文件中进行相关配置\r\n  1） 配置注解扫描路径\r\n  2）配置处理器映射器\r\n  3）配置处理器适配器\r\n  4）配置视图解析器\r\n（5）开发 Controller\r\n\r\nSpring Boot\r\n（1）导入相关的依赖包\r\n（2）开发 Controller\r\n  单单从开发步骤上讲都比我们的原始开发少了很多,其中的配置部分 Spring Boot 帮我们完成了,不需要我们在进行配置,当然如果我们想\r\n  更改 Spring Boot 的默认配置也是可以的.极大的简化了我们的开发.\r\n\r\n### 2. Spring Boot 的核心功能\r\n\r\n（1）独立运行的 spring 项目: Spring Boot 可以以 jar 包形式直接运行，如 java -jar xxx.jar 优点是：节省服务器资源\r\n（2）内嵌 servlet 容器: Spring Boot 可以选择内嵌 Tomcat，Jetty，这样我们无须以 war 包形式部署项目。\r\n（3）提供 starter 简化 Maven 配置: 在 Spring Boot 项目中为我们提供了很多的 spring-boot-starter-xxx\r\n            的项目(我们把这个依赖可以称之为起步依赖,我们导入指定的这些项目的坐标,就会自动导入和该模块相关的依赖包:例如我们后期再使用 Spring Boot 进行 web 开发我们就需要导入\r\n            spring-boot-starter-web 这个项目的依赖,导入这个依赖以后!那么Spring Boot 就会自动导入 web 开发所需要的其他的依赖包,如下图所示:\r\n\r\n          <div class=\"image-package\">\r\n            <div class=\"image-container\">\r\n              <div class=\"image-container-fill\">&nbsp;</div>\r\n              <div class=\"image-view\" data-width=\"423\" data-height=\"129\">![](https://upload-images.jianshu.io/upload_images/16598307-1d0a248f6c6fed30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/423/format/webp)</div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n（4）自动配置 spring: Spring Boot 会根据在类路径中的 jar 包，类，为 jar 包里的类自动配置 Bean，这样会极大减少我们要使用的配置。当然 Spring Boot\r\n            只考虑了大部分开发场景，并不是所有的场景，如果在实际的开发中我们需要自动配置 Bean，而 Spring Boot 不能满足，则可以自定义自动配置。\r\n（5）准生产的应用监控: Spring Boot 提供基于 http，ssh，telnet 对运行时的项目进行监控\r\n（6）无代码生成和 xml 配置: Spring Boot 大量使用 spring4.x 提供的注解新特性来实现无代码生成和 xml 配置。spring4.x\r\n            提倡使用 Java配置和注解配置组合，而 Spring Boot 不需要任何 xml 配置即可实现 spring 的所有配置。\r\n\r\n### 3. Spring Boot 的优点和缺点\r\n\r\n3.1 优点\r\n（1）快速构建项目\r\n（2）对主流框架无缝集成\r\n（3）项目可以独立运行，无需依赖外部 servlet 容器\r\n（4）提供运行时的应用监控\r\n（5）极大提高了开发，部署效率\r\n\r\n3.2 缺点\r\n（1）资料相对比较少\r\n（2）版本迭代较快\r\n\r\n## 二、Spring Boot 入门案例\r\n\r\n### 1. 新建maven项目\r\n![](https://upload-images.jianshu.io/upload_images/16598307-072a037b0cb07f1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n![](https://upload-images.jianshu.io/upload_images/16598307-65dd0a1a818346c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/845/format/webp)\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-23376753b020854e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/906/format/webp)\r\n\r\n创建后项目结构如下：\r\n\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-12e0c8f430c115e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/509/format/webp)\r\n      \r\n\r\n### 2. 新建相关文件夹与包\r\n\r\nmain/java下新建包cn.itcast.start\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-c172184c1202f513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/544/format/webp)\r\n\r\nresources文件夹下新建相关内容\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-646cbddd37e8d741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/521/format/webp)\r\n\r\n### 3. pom.xml文件添加maven依赖\r\n```xml\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project <span class=\"hljs-attr\">xmlns=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\" <span class=\"hljs-attr\">xmlns:xsi=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"\r\n      <span class=\"hljs-attr\">xsi:schemaLocation=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion&gt;4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;cn.itcast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;springboot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version&gt;0.0.1-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging&gt;jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging&gt;\r\n\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version&gt;1.4.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">relativePath /&gt; <span class=\"hljs-comment\">&lt;!-- lookup parent from repository --&gt;\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent&gt;\r\n\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties&gt;\r\n\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding&gt;UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.reporting.outputEncoding&gt;UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.reporting.outputEncoding&gt;\r\n\r\n          <span class=\"hljs-comment\">&lt;!--Spring Boot 项目默认的编译版本是 1.6,如果我们想使用其他的编译版本我们就需要在 pom.xml 文件中定义一个变量--&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version&gt;1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version&gt;\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties&gt;\r\n\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies&gt;\r\n\r\n          <span class=\"hljs-comment\">&lt;!-- 加入web开发的支持 --&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;   \r\n\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version&gt;1.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies&gt;\r\n\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins&gt;\r\n              <span class=\"hljs-comment\">&lt;!-- maven的编译插件 --&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version&gt;2.3.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration&gt;\r\n                      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source&gt;1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source&gt;\r\n                      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target&gt;1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target&gt;\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration&gt;\r\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin&gt;\r\n\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration&gt;\r\n                      <span class=\"hljs-comment\">&lt;!-- 没有该配置，devtools 不生效 --&gt;\r\n                      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fork&gt;true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fork&gt;\r\n                      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">addResources&gt;true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">addResources&gt;\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration&gt;\r\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins&gt;\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n### 4. 开发 Controller\r\n\r\n    在cn.itcast.start.controller包下创建测试UserController.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-comment\">//@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用\r\n    <span class=\"hljs-meta\">@RestController\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">UserController {\r\n\r\n      <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-string\">\"info\")\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public User <span class=\"hljs-title\">hello<span class=\"hljs-params\">(){\r\n\r\n          User user = <span class=\"hljs-keyword\">new User();\r\n\r\n          user.setUsername(<span class=\"hljs-string\">\"张三丰\");\r\n          user.setAddress(<span class=\"hljs-string\">\"揭阳市\");\r\n\r\n          <span class=\"hljs-keyword\">return user;\r\n      }\r\n    }\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n### 5. 开发启动类HelloSpringBootApplication.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start;\r\n    <span class=\"hljs-keyword\">import org.springframework.boot.SpringApplication;\r\n    <span class=\"hljs-keyword\">import org.springframework.boot.autoconfigure.SpringBootApplication;\r\n    <span class=\"hljs-keyword\">import org.springframework.cache.annotation.EnableCaching;\r\n    <span class=\"hljs-comment\">//主Application类(加了SpringBootApplication的类)，一定要放在代码的最外层，即Application.class与包同一级别\r\n    <span class=\"hljs-comment\">//这样可以保证在装配Bean的时候从Application所在的文件下从上向下扫描时，所有的类都会被装配进项目。\r\n    <span class=\"hljs-comment\">// 而如果写在某个包里，Application.class扫描时扫描不到其他class，因此springboot启动的时候没有报错，但是没办法进行访问\r\n    <span class=\"hljs-meta\">@SpringBootApplication\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">MySpringBootApplication {\r\n\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">static <span class=\"hljs-keyword\">void <span class=\"hljs-title\">main<span class=\"hljs-params\">(String[] args) {        \r\n          <span class=\"hljs-comment\">//入口运行类\r\n          SpringApplication.run(MySpringBootApplication.class, args);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    创建后项目结构如下:\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-42e3c873bf99e369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/499/format/webp) \r\n\r\n    温馨提示：\r\n    （1）MySpringBootApplication启动类一定要放在代码的最外层，即Application.class与包同一级别，这样可以保证在装配Bean的时候从Application所在的文件下从上向下扫描时，所有的类都会被装配进项目。如果写在某个包里，Application.class扫描时扫描不到其他class，因此springboot启动的时候没有报错，但是没办法进行访问。\r\n    （2）@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用\r\n    （3）@Controller注解如果没指定访问的url，那么该类下面的@RequestMapping方法不能出现重名（整个项目都不可以出现）\r\n\r\n### 6. 运行项目并访问\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-4f6fda76b6db9985.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n    启动完成 \r\n![](https://upload-images.jianshu.io/upload_images/16598307-bd49b1a616126184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n    浏览器进行访问\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-c819dd42ef89dac1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n    ## 三、Spring Boot核心功能代码实战\r\n\r\n### 1. 无 xml 配置的实现\r\n\r\n      自从 spring3.0 以后 spring 提供了很多的注解来替代 xml 文件的配置.最为核心的是下面的两个注解:\r\n      （1）@Configuration 标注该类是一个配置类.类似于我们定义的 applicationContext.xml\r\n      （2）@Bean 类似于我们在之前的 spring 配置文件中配置的&lt;bean id=”” class=””/&gt;\r\n      有了上面的两个注解我们就可以使用编码的方式来完成 spring 的相关配置,接下来我们就来使用 java 编码的方式来完成 spring 的配置\r\n\r\n    1.1 新建HelloService.java\r\n    在cn.itcast.start.service下新建HelloService.java类\r\n```java\r\n              <pre class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.service;\r\n\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface <span class=\"hljs-title\">HelloService {\r\n\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">sayHello<span class=\"hljs-params\">();\r\n    }\r\n    </span></span></span></span></span></span></span></span></span>`</pre>\r\n\r\n    1.2 新建HelloServiceImpl.java\r\n    cn.itcast.start.service.impl包下新建HelloServiceImpl.java\r\n\r\n              <pre class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.service.impl;\r\n\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.service.HelloService;\r\n\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">HelloServiceImpl <span class=\"hljs-keyword\">implements <span class=\"hljs-title\">HelloService {\r\n\r\n      <span class=\"hljs-meta\">@Override\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">sayHello<span class=\"hljs-params\">() {\r\n          <span class=\"hljs-keyword\">return <span class=\"hljs-string\">\"Hello JavaConfig\";\r\n      }\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n创建后项目文件结构如下：\r\n\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-a804555f97e6e141.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/430/format/webp) \r\n\r\n 1.3 编写配置类\r\n    cn.itcast.start.config包下新建JavaConfigTest.java类\r\n```java\r\n              <pre class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.config;\r\n\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.service.HelloService;\r\n    <span class=\"hljs-keyword\">import org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">JavaConfigTest {\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">static <span class=\"hljs-keyword\">void <span class=\"hljs-title\">main<span class=\"hljs-params\">(String[] args) {\r\n\r\n          <span class=\"hljs-comment\">// 通过AnnotationConfigApplicationContext这个类获取Spring容器\r\n          AnnotationConfigApplicationContext applicationContext = <span class=\"hljs-keyword\">new\r\n                  AnnotationConfigApplicationContext(ApplicationConfiguration.class) ;\r\n\r\n          HelloService helloService = applicationContext.getBean(HelloService.class) ;\r\n\r\n          String result = helloService.sayHello() ;\r\n\r\n          System.out.println(result);\r\n      }\r\n    }\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    1.4 运行JavaConfigTest.java\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-e22cd9205880315e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n    这个时候我们应该就明白了 Spring Boot 项目之所以能做到不需要 xml 文件,是因为它使用了这两个注解替换了之前了 xml 文件的配置。\r\n\r\n### 2. 静态资源的访问\r\n\r\n      在我们 web 开发中,存在很多的一些 css , js , 图片等等一些静态的资源文件!那么我们应该把这些静态资源存储在什么目录下呢?Spring Boot 项目要求我们将这个静态资源文件存储到\r\n                resources 目录下的 static 目录中; 当然这个配置是可以进行更改的,但是不建议更改!在进行访问的时候我们不需要添加上 static 文件目录,Spring Boot 会自动在 static\r\n                目录中查找对应的资源文件.\r\n      我们新建在resouces下的static文件夹就是用于存放静态资源的，静态资源的实战我们会在下面的模板引擎(freemarker)进行介绍\r\n\r\n### 3. 模板引擎(freemarker)\r\n\r\n      Spring Boot 项目建议我们使用模板引擎来进行页面视图的渲染,而不建议我们使用 jsp! 因此内嵌的 tomcat 也没有提供 jsp 页面的支持.Spring Boot 提供了大量的模板引擎,包含:\r\n                Freemarker , Groovy , Thymeleaf , Velocity 和 Mustache. 本次我们就来讲解一下 Spring Boot继承 freemarker 作为页面视图!\r\n    3.1 pom.xml添加依赖\r\n```xml\r\n              <pre class=\"hljs xml\">`        <span class=\"hljs-comment\">&lt;!--添加模板引擎(freemarker)依赖包--&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;spring-boot-starter-freemarker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n3.2 添加静态资源文件\r\n      将项目源码与资料下载中的资源文件复制进去static文件夹下\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-f3bea75f3fe5da07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/569/format/webp) \r\n\r\n 3.3 添加模板引擎\r\n    Spring Boot 项目为我们提供了一个 templates 目录专门用来存储模板文件的.\r\n                因此我们需要将指定的模板文件放在该目录下! 模板文件的后缀名默认是 ftl.\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-6b04785f2c7f5ba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/517/format/webp) \r\n\r\n3.4 新建访问Controller类\r\n      cn.itcast.start.controller包下新建JdController.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.controller;\r\n\r\n    <span class=\"hljs-keyword\">import org.springframework.stereotype.Controller;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n    <span class=\"hljs-comment\">//当使用Controller或RestController时，没指定访问的RequestMapping，那么所有的RequestMapping不能出现同名，否则启动会报错\r\n    <span class=\"hljs-meta\">@Controller\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">JdController {\r\n\r\n      <span class=\"hljs-comment\">/**\r\n       * 需求：返回jd首页\r\n       */\r\n      <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-string\">\"list\")\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">jdList<span class=\"hljs-params\">(){\r\n          <span class=\"hljs-keyword\">return <span class=\"hljs-string\">\"index\";\r\n      }\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n3.5 运行项目并访问\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-5f8157416091b4af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n![](https://upload-images.jianshu.io/upload_images/16598307-9d23373bf80cb30f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n\r\n### 4. 文件上传\r\n\r\n    4.1 新增模板文件\r\n    templates文件夹下新建模板文件file-upload.ftl\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-2bf23e7d553401ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/424/format/webp)\r\n```java\r\n              <pre\r\n                class=\"hljs xml\">`<span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta <span class=\"hljs-attr\">charset=<span class=\"hljs-string\">\"UTF-8\"&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title&gt;用户添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta <span class=\"hljs-attr\">name=<span class=\"hljs-string\">\"viewport\" <span class=\"hljs-attr\">content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1\"&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link <span class=\"hljs-attr\">rel=<span class=\"hljs-string\">\"stylesheet\" <span class=\"hljs-attr\">href=<span class=\"hljs-string\">\"css/bootstrap-theme.min.css\" /&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link <span class=\"hljs-attr\">rel=<span class=\"hljs-string\">\"stylesheet\" <span class=\"hljs-attr\">href=<span class=\"hljs-string\">\"css/bootstrap.min.css\" /&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script <span class=\"hljs-attr\">type=<span class=\"hljs-string\">\"text/javascript\" <span class=\"hljs-attr\">src=<span class=\"hljs-string\">\"js/jquery-1.11.3.min.js\" &gt;<span class=\"undefined\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script <span class=\"hljs-attr\">type=<span class=\"hljs-string\">\"text/javascript\" <span class=\"hljs-attr\">src=<span class=\"hljs-string\">\"js/bootstrap.min.js\" &gt;<span class=\"undefined\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body <span class=\"hljs-attr\">class=<span class=\"hljs-string\">\"container\"&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">center&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1&gt;文件上传表单<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">center&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form <span class=\"hljs-attr\">role=<span class=\"hljs-string\">\"form\" <span class=\"hljs-attr\">action=<span class=\"hljs-string\">\"/fileUpload\" <span class=\"hljs-attr\">enctype=<span class=\"hljs-string\">\"multipart/form-data\" <span class=\"hljs-attr\">method=<span class=\"hljs-string\">\"post\"&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div <span class=\"hljs-attr\">class=<span class=\"hljs-string\">\"form-group\"&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label <span class=\"hljs-attr\">for=<span class=\"hljs-string\">\"inputfile\"&gt;文件输入<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input <span class=\"hljs-attr\">type=<span class=\"hljs-string\">\"file\" <span class=\"hljs-attr\">id=<span class=\"hljs-string\">\"inputfile\" <span class=\"hljs-attr\">name=<span class=\"hljs-string\">\"uploadFile\"&gt;\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button <span class=\"hljs-attr\">type=<span class=\"hljs-string\">\"submit\" <span class=\"hljs-attr\">class=<span class=\"hljs-string\">\"btn btn-default\"&gt;提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n4.2 新建上传文件 Controller\r\n    cn.itcast.start.controller包下新建UploadController.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.controller;\r\n\r\n    <span class=\"hljs-keyword\">import org.springframework.stereotype.Controller;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.bind.annotation.RequestMapping;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.bind.annotation.ResponseBody;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.multipart.MultipartFile;\r\n\r\n    <span class=\"hljs-keyword\">import java.io.File;\r\n\r\n    <span class=\"hljs-meta\">@Controller\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">UploadController {\r\n\r\n      <span class=\"hljs-comment\">/**\r\n       * 需求：返回文件上传页面\r\n       */\r\n      <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-string\">\"file\")\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">jdList<span class=\"hljs-params\">(){\r\n          <span class=\"hljs-keyword\">return <span class=\"hljs-string\">\"file-Upload\";\r\n      }\r\n\r\n      <span class=\"hljs-meta\">@RequestMapping(value = <span class=\"hljs-string\">\"/fileUpload\")\r\n      <span class=\"hljs-meta\">@ResponseBody\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">fileUpload<span class=\"hljs-params\">(MultipartFile uploadFile) {\r\n          <span class=\"hljs-keyword\">try {\r\n\r\n              File file = <span class=\"hljs-keyword\">new File(<span class=\"hljs-string\">\"D:\\\\images\\\\\" + uploadFile.getOriginalFilename()) ;\r\n\r\n              uploadFile.transferTo(file);\r\n\r\n          } <span class=\"hljs-keyword\">catch (Exception e) {\r\n\r\n              e.printStackTrace();\r\n          }\r\n\r\n          <span class=\"hljs-keyword\">return <span class=\"hljs-string\">\"success\" ;\r\n      }\r\n    }\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n4.3 运行项目并访问 ![](https://upload-images.jianshu.io/upload_images/16598307-6fd22947c9f4f795.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n![](https://upload-images.jianshu.io/upload_images/16598307-c0ad5fc1d428d256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n### 5. Jsp 页面的支持(了解)\r\n\r\n    Spring Boot 不建议我们使用 jsp 页面作为视图的显示层,因此在 Spring Boot 中默认是不支持 jsp 页面的.如果我们还想使用 jsp 页面就需要添加 jsp 页面的支持!\r\n```java\r\n              <pre\r\n                class=\"hljs xml\">`<span class=\"hljs-comment\">&lt;!-- jsp的支持 --&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.apache.tomcat.embed<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;tomcat-embed-jasper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope&gt;provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n### 6. 拦截器\r\n\r\n      拦截器对使用 Spring mvc、Struts 的开发人员来说特别熟悉，因为你只要想去做好一个项目必然会用到它。拦截器在我们平时的项目中用处有很多，如：日志记录、用户登录状态拦截、安全拦截等等。而\r\n                Spring Boot 内部集成的是 Spring mvc 控制框架，所以使用起来跟SpringMVC 没有区别，只是在配置上有点不同。\r\n      下面演示拦截文件上传接口，并直接跳转到商城首页\r\n\r\n6.1 编写拦截器\r\n    cn.itcast.start.interceptor包下新建CheckUserLoginInterceptor.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.interceptor;\r\n\r\n    <span class=\"hljs-keyword\">import org.springframework.web.servlet.HandlerInterceptor;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.servlet.ModelAndView;\r\n\r\n    <span class=\"hljs-keyword\">import javax.servlet.http.HttpServletRequest;\r\n    <span class=\"hljs-keyword\">import javax.servlet.http.HttpServletResponse;\r\n\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">CheckUserLoginInterceptor <span class=\"hljs-keyword\">implements <span class=\"hljs-title\">HandlerInterceptor {\r\n      <span class=\"hljs-meta\">@Override\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">boolean <span class=\"hljs-title\">preHandle<span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object\r\n              handler) <span class=\"hljs-keyword\">throws Exception {\r\n\r\n              response.sendRedirect(<span class=\"hljs-string\">\"/list\");\r\n              <span class=\"hljs-keyword\">return <span class=\"hljs-keyword\">false ;\r\n      }\r\n      <span class=\"hljs-meta\">@Override\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">postHandle<span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler,\r\n                             ModelAndView modelAndView) <span class=\"hljs-keyword\">throws Exception {\r\n      }\r\n      <span class=\"hljs-meta\">@Override\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">afterCompletion<span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object\r\n              handler, Exception ex) <span class=\"hljs-keyword\">throws Exception {\r\n      }\r\n    }\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n``` \r\n![](https://upload-images.jianshu.io/upload_images/16598307-79d94eab1fcf80c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/443/format/webp) \r\n\r\n6.2 配置拦截器\r\n    cn.itcast.start.config包下新建InterceptorConfig.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.config;\r\n\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.interceptor.CheckUserLoginInterceptor;\r\n    <span class=\"hljs-keyword\">import org.springframework.context.annotation.Configuration;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\r\n\r\n    <span class=\"hljs-meta\">@Configuration\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">InterceptorConfig <span class=\"hljs-keyword\">extends <span class=\"hljs-title\">WebMvcConfigurerAdapter {\r\n      <span class=\"hljs-meta\">@Override\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">addInterceptors<span class=\"hljs-params\">(InterceptorRegistry registry) {\r\n          registry.addInterceptor(<span class=\"hljs-keyword\">new CheckUserLoginInterceptor()).addPathPatterns(<span class=\"hljs-string\">\"/file\") ;\r\n      }\r\n    }\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    温馨提示：file为接口访问的url\r\n\r\n6.3 运行项目并访问\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-0c812459528a81b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n![](https://upload-images.jianshu.io/upload_images/16598307-ec744ae0e51cfbf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n![](https://upload-images.jianshu.io/upload_images/16598307-7d5aa879992631cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n\r\n ### 7. 整合mybatis\r\n\r\n    7.1 新建数据库\r\n    我已经准备好相应的.sql文件在项目源码与资料下载中，请直接使用Navicat for\r\n                MySQL工具进行导入，数据库名为springboot_test，具体字段如下：\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-f6e0d3aae004e267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n    我已经插入了一条数据\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-4fa7c23c2222f721.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/569/format/webp) \r\n\r\n    7.2 pom.xml文件添加maven依赖\r\n```xml\r\n              <pre\r\n                class=\"hljs xml\">`<span class=\"hljs-comment\">&lt;!--mysql--&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version&gt;5.1.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;\r\n\r\n          <span class=\"hljs-comment\">&lt;!--阿里巴巴数据连接池--&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version&gt;1.0.28<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    7.3 添加配置文件\r\n    application.properties文件下添加以下内容：\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-617b097077dcabff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n```java\r\n              <pre class=\"hljs bash\">`<span class=\"hljs-comment\">#spring集成Mybatis环境\r\n    mybatis.type-aliases-package=cn.itcast.start.domain\r\n    <span class=\"hljs-comment\">#加载Mybatis配置文件\r\n    mybatis.mapper-locations = classpath:mapper/*Mapper.xml\r\n    mybatis.config-location = classpath:mapper/config/sqlMapConfig.xml\r\n\r\n    spring.datasource.driver-class-name= com.mysql.jdbc.Driver\r\n    spring.datasource.url = jdbc:mysql://localhost:3306/springboot_test?useUnicode=<span class=\"hljs-literal\">true&amp;useSSL=<span class=\"hljs-literal\">true\r\n    spring.datasource.username = root\r\n    spring.datasource.password = 147258qq\r\n    </span></span></span></span>`</pre>\r\n```\r\n    mapper文件夹下新建UserMapper.xml\r\n```xml\r\n              <pre\r\n                class=\"hljs xml\">`<span class=\"php\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">\"1.0\" encoding=<span class=\"hljs-string\">\"UTF-8\" <span class=\"hljs-meta\">?&gt;\r\n    <span class=\"hljs-meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper <span class=\"hljs-attr\">namespace=<span class=\"hljs-string\">\"cn.itcast.start.mapper.UserMapper\"&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select <span class=\"hljs-attr\">id=<span class=\"hljs-string\">\"findAll\" <span class=\"hljs-attr\">resultType=<span class=\"hljs-string\">\"user\"&gt;\r\n          select * from user\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    mapper/config文件夹下新建sqlMapConfig.xml\r\n```xml\r\n              <pre class=\"hljs xml\">`<span class=\"php\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">\"1.0\" encoding=<span class=\"hljs-string\">\"UTF-8\"<span class=\"hljs-meta\">?&gt;\r\n    <span class=\"hljs-meta\">&lt;!DOCTYPE configuration\r\n    PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration&gt;     \r\n\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration&gt;\r\n    </span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    创建后项目结构如下：\r\n ![](https://upload-images.jianshu.io/upload_images/16598307-52c01cd3e5c1674c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/553/format/webp) \r\n    7.4 新建相关代码\r\n    cn.itcast.start.domain包下新建实体类User.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.domain;\r\n\r\n    <span class=\"hljs-keyword\">import java.io.Serializable;\r\n    <span class=\"hljs-keyword\">import java.util.Date;\r\n\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">User <span class=\"hljs-keyword\">implements <span class=\"hljs-title\">Serializable{\r\n\r\n      <span class=\"hljs-comment\">/**\r\n       * \r\n       */\r\n      <span class=\"hljs-keyword\">private <span class=\"hljs-keyword\">static <span class=\"hljs-keyword\">final <span class=\"hljs-keyword\">long serialVersionUID = <span class=\"hljs-number\">1L;\r\n      <span class=\"hljs-keyword\">private Integer id; \r\n      <span class=\"hljs-keyword\">private String username;\r\n      <span class=\"hljs-keyword\">private Date birthday;\r\n      <span class=\"hljs-keyword\">private String sex;\r\n      <span class=\"hljs-keyword\">private String address;\r\n\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public Integer <span class=\"hljs-title\">getId<span class=\"hljs-params\">() {\r\n          <span class=\"hljs-keyword\">return id;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">setId<span class=\"hljs-params\">(Integer id) {\r\n          <span class=\"hljs-keyword\">this.id = id;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public Date <span class=\"hljs-title\">getBirthday<span class=\"hljs-params\">() {\r\n          <span class=\"hljs-keyword\">return birthday;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">setBirthday<span class=\"hljs-params\">(Date birthday) {\r\n          <span class=\"hljs-keyword\">this.birthday = birthday;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">getSex<span class=\"hljs-params\">() {\r\n          <span class=\"hljs-keyword\">return sex;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">setSex<span class=\"hljs-params\">(String sex) {\r\n          <span class=\"hljs-keyword\">this.sex = sex;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">getUsername<span class=\"hljs-params\">() {\r\n          <span class=\"hljs-keyword\">return username;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">setUsername<span class=\"hljs-params\">(String username) {\r\n          <span class=\"hljs-keyword\">this.username = username;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public String <span class=\"hljs-title\">getAddress<span class=\"hljs-params\">() {\r\n          <span class=\"hljs-keyword\">return address;\r\n      }\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public <span class=\"hljs-keyword\">void <span class=\"hljs-title\">setAddress<span class=\"hljs-params\">(String address) {\r\n          <span class=\"hljs-keyword\">this.address = address;\r\n      }\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    cn.itcast.start.mapper包下新建UserMapper.java\r\n```java\r\n              <pre\r\n                class=\"hljs css\">`<span class=\"hljs-selector-tag\">package <span class=\"hljs-selector-tag\">cn<span class=\"hljs-selector-class\">.itcast<span class=\"hljs-selector-class\">.start<span class=\"hljs-selector-class\">.mapper;\r\n\r\n    <span class=\"hljs-selector-tag\">import <span class=\"hljs-selector-tag\">java<span class=\"hljs-selector-class\">.util<span class=\"hljs-selector-class\">.List;\r\n\r\n    <span class=\"hljs-selector-tag\">import <span class=\"hljs-selector-tag\">org<span class=\"hljs-selector-class\">.apache<span class=\"hljs-selector-class\">.ibatis<span class=\"hljs-selector-class\">.annotations<span class=\"hljs-selector-class\">.Mapper;\r\n\r\n    <span class=\"hljs-selector-tag\">import <span class=\"hljs-selector-tag\">cn<span class=\"hljs-selector-class\">.itcast<span class=\"hljs-selector-class\">.start<span class=\"hljs-selector-class\">.domain<span class=\"hljs-selector-class\">.User;\r\n    @<span class=\"hljs-keyword\">Mapper\r\n    public interface UserMapper {\r\n\r\n      <span class=\"hljs-selector-tag\">public <span class=\"hljs-selector-tag\">List&lt;<span class=\"hljs-selector-tag\">User&gt; <span class=\"hljs-selector-tag\">findAll();\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    cn.itcast.start.service包下新建UserService.java\r\n```java\r\n              <pre\r\n                class=\"hljs css\">`<span class=\"hljs-selector-tag\">package <span class=\"hljs-selector-tag\">cn<span class=\"hljs-selector-class\">.itcast<span class=\"hljs-selector-class\">.start<span class=\"hljs-selector-class\">.service;\r\n\r\n    <span class=\"hljs-selector-tag\">import <span class=\"hljs-selector-tag\">java<span class=\"hljs-selector-class\">.util<span class=\"hljs-selector-class\">.List;\r\n    <span class=\"hljs-selector-tag\">import <span class=\"hljs-selector-tag\">java<span class=\"hljs-selector-class\">.util<span class=\"hljs-selector-class\">.Map;\r\n\r\n    <span class=\"hljs-selector-tag\">import <span class=\"hljs-selector-tag\">cn<span class=\"hljs-selector-class\">.itcast<span class=\"hljs-selector-class\">.start<span class=\"hljs-selector-class\">.domain<span class=\"hljs-selector-class\">.User;\r\n\r\n    <span class=\"hljs-selector-tag\">public <span class=\"hljs-selector-tag\">interface <span class=\"hljs-selector-tag\">UserService {\r\n\r\n      <span class=\"hljs-comment\">/**\r\n       * 根据接口查询所用的用户\r\n       */\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    cn.itcast.start.service.impl包下新建UserServiceImpl.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.service.impl;\r\n\r\n    <span class=\"hljs-keyword\">import java.util.HashMap;\r\n    <span class=\"hljs-keyword\">import java.util.List;\r\n    <span class=\"hljs-keyword\">import java.util.Map;\r\n\r\n    <span class=\"hljs-keyword\">import org.springframework.beans.factory.annotation.Autowired;\r\n    <span class=\"hljs-keyword\">import org.springframework.cache.annotation.Cacheable;\r\n    <span class=\"hljs-keyword\">import org.springframework.stereotype.Service;\r\n\r\n    <span class=\"hljs-keyword\">import redis.clients.jedis.JedisCluster;\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.domain.User;\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.mapper.UserMapper;\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.service.UserService;\r\n    <span class=\"hljs-meta\">@Service\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">UserServiceImpl <span class=\"hljs-keyword\">implements <span class=\"hljs-title\">UserService {\r\n\r\n      <span class=\"hljs-meta\">@Autowired\r\n      <span class=\"hljs-keyword\">private UserMapper userMapper;\r\n\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public List&lt;User&gt; <span class=\"hljs-title\">findAllUser<span class=\"hljs-params\">() {\r\n          List&lt;User&gt; list = userMapper.findAll();\r\n          <span class=\"hljs-keyword\">return list;\r\n      }\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    cn.itcast.start.controller包下新建UserController.java\r\n```java\r\n              <pre\r\n                class=\"hljs java\">`<span class=\"hljs-keyword\">package cn.itcast.start.controller;\r\n\r\n    <span class=\"hljs-keyword\">import java.util.List;\r\n    <span class=\"hljs-keyword\">import java.util.Map;\r\n\r\n    <span class=\"hljs-keyword\">import org.springframework.beans.factory.annotation.Autowired;\r\n    <span class=\"hljs-keyword\">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\r\n    <span class=\"hljs-keyword\">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\r\n    <span class=\"hljs-keyword\">import org.springframework.stereotype.Controller;\r\n    <span class=\"hljs-keyword\">import org.springframework.ui.Model;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.bind.annotation.RequestMapping;\r\n    <span class=\"hljs-keyword\">import org.springframework.web.bind.annotation.RestController;\r\n\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.domain.User;\r\n    <span class=\"hljs-keyword\">import cn.itcast.start.service.UserService;\r\n\r\n    <span class=\"hljs-comment\">//@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用\r\n    <span class=\"hljs-meta\">@RestController\r\n    <span class=\"hljs-keyword\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">UserController {\r\n\r\n      <span class=\"hljs-meta\">@Autowired\r\n      <span class=\"hljs-keyword\">private UserService userService;\r\n\r\n      <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-string\">\"info\")\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public User <span class=\"hljs-title\">hello<span class=\"hljs-params\">(){\r\n\r\n          User user = <span class=\"hljs-keyword\">new User();\r\n\r\n          user.setUsername(<span class=\"hljs-string\">\"张三丰\");\r\n          user.setAddress(<span class=\"hljs-string\">\"揭阳市\");\r\n\r\n          <span class=\"hljs-keyword\">return user;\r\n      }\r\n\r\n      <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-string\">\"list2\")\r\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public List&lt;User&gt; <span class=\"hljs-title\">list2<span class=\"hljs-params\">(){\r\n          List&lt;User&gt; list = userService.findAllUser();\r\n          <span class=\"hljs-keyword\">return list;\r\n      }\r\n\r\n    }\r\n\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    7.5 运行项目并访问\r\n\r\n           ![](https://upload-images.jianshu.io/upload_images/16598307-5e25393854bfff16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n     >![](https://upload-images.jianshu.io/upload_images/16598307-9d769b5c2de05c8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n### 8. 项目热部署(开发时使用)\r\n\r\n      在进行项目开发阶段,我们需要频繁的修改代码,来进行项目的测试!每一次进行项目代码修改的时候,我们都需要进行项目重新启动,这样新添加的代码才可以生效!这种做法比较麻烦.我们就可以使用 Spring Boot\r\n                为我们提供的: spring-boot-devtools,来进行项目的热部署! 我们只需要引入对应的依赖包即可!\r\n\r\n    8.1 pom.xml文件添加相关配置\r\n```xml\r\n              <pre\r\n                class=\"hljs xml\">`<span class=\"hljs-comment\">&lt;!-- 热部署 --&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency&gt;\r\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;spring-boot-devtools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional&gt;true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional&gt;\r\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope&gt;true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency&gt;\r\n\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build&gt;\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins&gt;\r\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId&gt;org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId&gt;spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId&gt;\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration&gt;\r\n            <span class=\"hljs-comment\">&lt;!-- 没有该配置，devtools 不生效 --&gt;\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fork&gt;true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fork&gt;\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">addResources&gt;true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">addResources&gt;\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration&gt;\r\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin&gt;\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins&gt;\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build&gt;\r\n    </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>`</pre>\r\n```\r\n    8.2 application.properties文件添加配置\r\n```java\r\n              <pre class=\"hljs bash\">`<span class=\"hljs-comment\">#热部署生效\r\n    spring.devtools.restart.enabled:<span class=\"hljs-literal\">true\r\n    <span class=\"hljs-comment\">#设置重启的目录\r\n    spring.devtools.restart.additional-paths:src/main/java \r\n    <span class=\"hljs-comment\">#classpath目录下的WEB-INF文件夹内容修改不重启\r\n    spring.devtools.restart.exclude:WEB-INF/**\r\n    </span></span></span></span>\r\n```\r\n8.3 idea修改配置\r\n这样配置在myeclipse中已经可以实现热启动，但是在idea中配置好无效，下面需要修改idea中的两个配置\r\n（1）setting –&gt; compiler ，将 Build project automatically 勾选上\r\n（2）alt + shift + a 搜索 registry\r\n            选第一个，弹出框后下拉找到compiler.automake.allow.when.app.running 勾选上即可。\r\n（3）重启idea\r\n\r\n8.4 运行项目并测试\r\n >![](https://upload-images.jianshu.io/upload_images/16598307-3a8a17b13581dd90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n浏览器访问如下\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-6f4353ea4697fa96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n清除控制台信息\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-0996cf6fde59528e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n在代码中修改返回的参数\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-d821ca0bd1537b65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/528/format/webp) \r\n\r\n点击保存后，查看控制台，项目已经自动重新部署\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-2dff49cb2af15526.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp) \r\n\r\n重新访问浏览器\r\n\r\n![](https://upload-images.jianshu.io/upload_images/16598307-8eb6f02a2496b583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp)\r\n\r\n## 四、项目源码与资料下载\r\n\r\n链接：[https://pan.baidu.com/s/1lup1Wey-i9EW8G03-4ukig](https://links.jianshu.com/go?to=https%3A%2F%2Fpan.baidu.com%2Fs%2F1lup1Wey-i9EW8G03-4ukig)\r\n提取码：737x\r\n\r\n## 五、参考文章\r\n\r\nhttp://yun.itheima.com/course/471.html\r\n', '2021-03-05 18:40:57', '0');
INSERT INTO `m_blog` VALUES ('36', '1', 'React 组件通信之发布订阅模式', 'react 通信', 'react的数据流是单向的, react 通信有以下几种方式：\n\n父向子通信：传入props\n子向父通信：父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值\n父向孙通信：利用context传值。React.createContext()\n兄弟间通信：\n1、找一个相同的父组件，既可以用props传递数据，也可以用context的方式来传递数据。\n2、用一些全局机制去实现通信，比如redux等\n3、发布订阅模式\n\n### 兄弟间通信 - 发布订阅模式\n\n组件间通信需要引用一个类的实例，使用单例模式实现。\n\n### 发布/订阅模式\n\n在 发布/订阅模式 有 发布者 和 订阅者，它们通过信道链接到一起。\n\n其主要包含三个对象：\n\n发布者：消息的发布者，往信道中投递消息的对象。\n订阅者：订阅一个或者多个信道消息的对象。\n信道：每个信道都有一个名字，信道的实现细节对用户代码来说是隐藏的。\n#### 优点\n\n1. 松耦合：发布者和订阅者的通信是在用户代码之外处理的，通过信道降低了发布者和订阅者的耦合性\n2. 可扩展性：发布/订阅模式可以让系统在无论什么时候都可以扩展\n3. 灵活性：不需要担心不同的组件是如何组合在一起的\n \n#### 缺点\n1. 无法知道消息传送是成功的还是失败的，信道不会通知系统消息传送的状态\n2. 随着订阅者和发布者数量的增加，不断增加的消息传送回导致架构的不稳定，容易在负载大的时候出问题\n\n### 单例模式\n\n确保一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n代码实现\n\n定义发布对象：\n```js\nclass SingletonPublish {\n  constructor() {\n    this.listenList = {};\n    this.instance = null;\n  }\n\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new SingletonPublish();\n    }\n    return this.instance;\n  }\n\n  // 订阅者添加订阅事件\n  addListen(key, fn) {\n    if (!this.listenList[key]) {\n      this.listenList[key] = [];\n    }\n    this.listenList[key].push(fn);\n  }\n\n  // 发布者发布消息，执行订阅者订阅事件\n  trigger() {\n    const key = Array.from(arguments).shift();\n    const fns = this.listenList[key];\n    if (!fns || fns.length === 0) {\n      return false;\n    }\n\n    fns.forEach((fn) => {\n      fn.apply(this, arguments);\n    });\n  }\n\n  // 移除订阅事件\n  remove(key, fn) {\n    const fns = this.listenList[key];\n    if (!fns || fns.length === 0) return;\n\n    if (!fn) {\n      this.listenList[key] = [];\n    } else {\n      for (let l = fns.length - 1; l >= 0; l--) {\n        if (fn === fns[l]) {\n          fns.splice(l, 1);\n        }\n      }\n    }\n  }\n}\n\nexport default SingletonPublish.getInstance();\n```\n订阅者订阅一个back事件：\n```js\n\nimport SingletonPublish from \'../singleton-publish\';\n\n// ...\nSingletonPublish.addListen(\'back\', () => {\n  console.log(\'get -- back\');\n  SingletonPublish.remove(\'back\', hasExitAndVisible);\n});\n```\n发布者发布一个back消息：\n```js\nimport SingletonPublish from \'../singleton-publish\';\n\n// ....\nSingletonPublish.trigger(\'back\');\n\n```\n\n\n### 观察者模式\n\n\n在这种模式中，一个目标对象（被观察者）管理所有的依赖于它的对象（观察者），并且在它本身的状态发生变化的时候主动发出通知。\n其主要包含两个对象：\n- 被观察者\n- 观察者\n#### 缺点\n1. 耦合问题：每个观察者必须和被观察对象绑定在一起，这引入了耦合\n2. 性能问题：在最基本的实现中观察对象必须同步地通知观察者。这可能会导致性能瓶颈。\n\n\n\n', '2021-03-05 18:37:45', '0');
INSERT INTO `m_blog` VALUES ('37', '1', 'vue cli3.0快速搭建项目详解（强烈推荐）', '这篇文章主要介绍下vue-cli3.0项目搭建，项目结构和配置等整理一下，分享给大家。', '## 一、介绍\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统。有三个组件：\n\nCLI：@vue/cli 全局安装的 npm 包，提供了终端里的vue命令（如：vue create 、vue serve 、vue ui 等命令）\n\nCLI 服务：@vue/cli-service是一个开发环境依赖。构建于 webpack 和 webpack-dev-server 之上（提供 如：serve、build 和 inspect 命令）\n\nCLI 插件：给Vue 项目提供可选功能的 npm 包 （如： Babel/TypeScript 转译、ESLint 集成、unit和 e2e测试 等）\n\n## 二、安装\n1、全局安装过旧版本的 vue-cli(1.x 或 2.x)要先卸载它，否则跳过此步：\n\n \n\n```\n npm uninstall vue-cli -g //或者 yarn global remove vue-cli\n\n`````\n\n\n 　　\n\n \n2、Vue CLI 3需要 nodeJs ≥ 8.9 (官方推荐 8.11.0+，你可以使用 nvm 或 nvm-windows在同一台电脑中管理多个 Node 版本）。\n\n 下载安装nodeJs，中文官方下载地址：http://nodejs.cn/download/ \n\n3、安装@vue/cli（Vue CLI 3的包名称由 vue-cli 改成了 @vue/cli）\n```\ncnpm install -g @vue/cli //yarn global add @vue/cli\n```\n　　vue -V   检查vue版本号\n## 三、使用\n### 1、vue create 搭建新项目\n（1）新建项目：\n*官方提示：如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，必须通过 winpty vue.cmd create hello-world 启动这个命令\n```\nvue create <Project Name> //文件名 不支持驼峰（含大写字母）\n\n```\n具体操作如下：\n\n首先，会提示你选择一个preset（预设）：\n\n① 除最后两个，其他选项都是你此前保存的预设配置（如下图第一个“ my-default”是我之前保存的预设配置，如今便可以直接用了）：\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516142801141-1205521481.png)\n\n如果没有配置保存过，则只有以下两个选项：\n\n② default（babel，eslint）：默认设置（直接enter）非常适合快速创建一个新项目的原型，没有带任何辅助功能的 npm包\n\n③ Manually select features：自定义配置（按方向键 ↓）是我们所需要的面向生产的项目，提供可选功能的 npm 包\n\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143004632-496005591.png)\n\n手动选择需要添加的配置项：\n? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection)\n>( ) Babel //转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n( ) TypeScript// TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行，目前较少人再用\n( ) Progressive Web App (PWA) Support// 渐进式Web应用程序\n( ) Router // vue-router（vue路由）\n( ) Vuex // vuex（vue的状态管理模式）\n( ) CSS Pre-processors // CSS 预处理器（如：less、sass）\n( ) Linter / Formatter // 代码风格检查和格式化（如：ESlint）\n( ) Unit Testing // 单元测试（unit tests）\n( ) E2E Testing // e2e（end to end） 测试\n\n选择完后直接enter，然后会提示你选择对应功能的具体工具包，选择自己擅长或者使用广泛的（方便遇到问题时百度），简介如下：\n\n ①是否使用history router：\n\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143141989-277414817.png)  \nVue-Router 利用了浏览器自身的hash 模式和 history 模式的特性来实现前端路由（通过调用浏览器提供的接口）\n\n② css预处理器\n\n主要为css解决浏览器兼容、简化CSS代码 等问题\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143244291-2122315134.png)\n③ ESLint：\n\n提供一个插件化的javascript代码检测工具，ESLint + Prettier //使用较多\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143312956-1919582192.png)\n④ 何时检测：\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143346267-59729832.png)\n\n⑤ 单元测试 ：\n\n? Pick a unit testing solution: (Use arrow keys)\n> Mocha + Chai //mocha灵活,只提供简单的测试结构，如果需要其他功能需要添加其他库/插件完成。必须在全局环境中安装\nJest //安装配置简单，容易上手。内置Istanbul，可以查看到测试覆盖率，相较于Mocha:配置简洁、测试代码简洁、易于和babel集成、内置丰富的expect\n⑥ 如何存放配置 ：\n\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143444291-1929806019.png)\n\n⑦ 是否保存本次配置（y:记录本次配置，然后需要你起个名; n：不记录本次配置）：\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143517819-1195493657.png)\n\n⑧ 搭建完成：\n\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516143615590-1832062470.png)\n\n 2，项目结构\n![](https://img2018.cnblogs.com/blog/1107427/201905/1107427-20190516144134684-1971754601.png)\n\n精简了很多，但还是和vue2.0有很多区别的，基本的用法变化不是特别大\n\n① vuex（状态管理）：\n\n　　vue cli 2 中 ：vuex是搭建完成后自己npm install的，并不包括在搭建过程中。可以看到vue cli 2的vuex默认文件夹（store）又包含了三个js文件：action（存放一些调用外部API接口的异步执行的的方法，然后commit mutations改变mutations 数据）、index（初始化mutations 数据，是store的出口）、mutations（处理数据逻辑的同步执行的方法的集合，Vuex中store数据改变的唯一方法commit mutations）\n\n　　vue cli 3 中：vuex是包含在搭建过程供选择的预设。vue cli 3 中默认只用一个store.js代替了原来的store文件夹中的三个js文件。action、mutations、state以及store 的 getters 的用法有很多\n\n② router （路由）：\n\n　　vue cli 2 ：“ router/index.js ”\n\n　　vue cli 3：“router.js”（用法和做的事都一样）\n\n③ 去掉 static  、 新增 public 文件夹\n\n　　vue cli 2 ：static 是 webpack 默认存放静态资源的文件夹，打包时会直接复制一份到dist文件夹不会经过 webpack 编译 \n\n　　vue cli 3  ：摒弃 static 新增了 public 。vue cli 3 中“静态资源”两种处理方式：\n\n　　经webpack 处理：在 JavaScript 被导入或在 template/CSS 中通过“相对路径”被引用的资源会被编译并压缩\n\n　　不经webpack 处理：放置在 public 目录下或通过绝对路径被引用的资源将会“直接被拷贝”一份，不做任何编译压缩处理\n\n④ index.html ：\n\n　　vue cli 2 ：“index.html ” \n\n　　vue cli 3 ：“public/index.html ”此模板会被 html-webpack-plugin 处理的\n\n⑤ src/views：\n\n　　vue cli 3 的 src文件夹 新增 views文件夹 用来存放 “页面”，区分 components（组件）\n\n⑥ 去掉 build（根据config中的配置来定义规则）、config（配置不同环境的参数）文件夹 ：\n\n 　　vue cli 3 中，这些配置 你可以通过 命令行参数、或 vue.config.js （在根目录 新建一个 vue.config.js 同名文件）里的 devServer 字段配置开发服务器 \n\n⑦ babel.config.js：\n\n　　配置Babel 。Vue CLI 使用了 Babel 7 中的新配置格式 babel.config.js。和 .babelrc 或 package.json 中的 babel 字段不同，这个配置文件不会使用基于文件位置的方案，而是会一致地运用到项目根目录以下的所有文件，包括 node_modules 内部的依赖。官方推荐在 Vue CLI 项目中始终使用 babel.config.js 取代其它格式。\n\n⑧ 根目录的一些其他文件的改变：\n\n　　之前所有的配置文件都在vue create 搭建时preset预设 或者 后期可以通过 命令参数 、 vue.config.js 中配置\n\n根据需要在根目录下新建 vue.config.js自行配置，eg：（简单配置，更多配置详情参见官网：https://cli.vuejs.org/zh/config/）\n\n```\nmodule.exports = {\n  baseUrl: \'/\',// 部署应用时的根路径(默认\'/\'),也可用相对路径(存在使用限制)\n  outputDir: \'dist\',// 运行时生成的生产环境构建文件的目录(默认\'\'dist\'\'，构建之前会被清除)\n  assetsDir: \'\',//放置生成的静态资源(s、css、img、fonts)的(相对于 outputDir 的)目录(默认\'\')\n  indexPath: \'index.html\',//指定生成的 index.html 的输出路径(相对于 outputDir)也可以是一个绝对路径。\n  pages: {//pages 里配置的路径和文件名在你的文档目录必须存在 否则启动服务会报错\n    index: {//除了 entry 之外都是可选的\n      entry: \'src/index/main.js\',// page 的入口,每个“page”应该有一个对应的 JavaScript 入口文件\n      template: \'public/index.html\',// 模板来源\n      filename: \'index.html\',// 在 dist/index.html 的输出\n      title: \'Index Page\',// 当使用 title 选项时,在 template 中使用：<title><%= htmlWebpackPlugin.options.title %></title>\n      chunks: [\'chunk-vendors\', \'chunk-common\', \'index\'] // 在这个页面中包含的块，默认情况下会包含,提取出来的通用 chunk 和 vendor chunk\n    },\n    subpage: \'src/subpage/main.js\'//官方解释：当使用只有入口的字符串格式时,模板会被推导为\'public/subpage.html\',若找不到就回退到\'public/index.html\',输出文件名会被推导为\'subpage.html\'\n  },\n  lintOnSave: true,// 是否在保存的时候检查\n  productionSourceMap: true,// 生产环境是否生成 sourceMap 文件\n  css: {\n    extract: true,// 是否使用css分离插件 ExtractTextPlugin\n    sourceMap: false,// 开启 CSS source maps\n    loaderOptions: {},// css预设器配置项\n    modules: false// 启用 CSS modules for all css / pre-processor files.\n  },\n  devServer: {// 环境配置\n    host: \'localhost\',\n    port: 8080,\n    https: false,\n    hotOnly: false,\n    open: true, //配置自动启动浏览器\n    proxy: {// 配置多个代理(配置一个 proxy: \'http://localhost:4000\' )\n      \'/api\': {\n        target: \'<url>\',\n        ws: true,\n        changeOrigin: true\n      },\n      \'/foo\': {\n        target: \'<other_url>\'\n      }\n    }\n  },\n  pluginOptions: {// 第三方插件配置\n    // ...\n  }\n};\n\n```\n\nvue-cli升级到3之后，减少了很多的配置文件，将所有的配置项都浓缩到了vue.config.js这个文件中，所以学懂并会用vue.config.js文件很重要。\n\n这里有一篇关于vue-cli3的全面配置的文章供大家参考，https://segmentfault.com/a/1190000017008697\n\n热更新配置\n\n在vue.config.js添加\n\n```\n  chainWebpack: config => {\n      // 修复HMR\n     config.resolve.symlinks(true);\n },\n\n```\n\n修改css部分热更新还需要注释掉   //extract: true,\n```\ncss: {\n     //extract: true,// 是否使用css分离插件 ExtractTextPlugin\n     sourceMap: false,// 开启 CSS source maps\n     loaderOptions: {},// css预设器配置项\n     modules: false// 启用 CSS modules for all css / pre-processor files.\n},\n\n\n```\n这样，热更新配置就完成了！\n\n3、vue ui 图形化界面创建项目\n\n	1   vue ui \n\n``````````````````````````````````````````````````````````````````````````````\n ', '2021-03-16 09:58:20', '0');
